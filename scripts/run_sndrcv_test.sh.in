#!/bin/bash -eu

#
# Copyright (c) 2017, Carnegie Mellon University.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the University nor the names of its contributors
#    may be used to endorse or promote products derived from this software
#    without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT
# HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS
# OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
# AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
# WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

###############
# Core script #
###############

logfile=""
source @CMAKE_INSTALL_PREFIX@/scripts/common.sh

get_jobdir
gen_hostfile

logfile=$jobdir/sndrcv-log.txt
server="${dfsu_prefix}/bin/sndrcv-srvr"
client="${dfsu_prefix}/bin/sndrcv-client"

touch $logfile
message "Output is available in $jobdir"

host1=$(echo "$all_nodes" | sort | head -n 1)
host2=$(echo "$all_nodes" | sort | head -n 2 | tail -n 1)

do_mpirun 1 1 "" $host1 "hostname -i" "$jobdir/host1-ip.txt"
do_mpirun 1 1 "" $host2 "hostname -i" "$jobdir/host2-ip.txt"
host1_ip=$(cat $jobdir/host1-ip.txt | head -1)
host2_ip=$(cat $jobdir/host2-ip.txt | head -1)
message "Host 1: hostname = $host1, ip = $host1_ip"
message "Host 2: hostname = $host2, ip = $host2_ip"

protos=("bmi+tcp" "cci+tcp" "cci+gni")
instances=(1 2 4 8)
repeats=3

run_one() {
    proto="$1"
    num="$2"
    iter=$3

    message ""
    message "====================================================="
    message "Testing protocol '$proto' with $num Mercury instances"
    message "Iteration $iter out of $repeats"
    message "====================================================="
    message ""

    clogfile=$jobdir/client-$proto-$num-$iter-log.txt
    slogfile=$jobdir/server-$proto-$num-$iter-log.txt

    saddress="${proto}://${host1_ip}:%d"
    caddress="${proto}://${host2_ip}:%d"

    # Start the server
    message "Starting server (Instances: $num, Address spec: $saddress)."
    do_mpirun 1 1 "" $host1 "$server $num $saddress" "$slogfile" &

    server_pid=$!

    # Start the client
    message "Starting client (Instances: $num, Address spec: $caddress)."
    message "Please be patient while the test is in progress..."
    do_mpirun 1 1 "" $host2 "$client $num $caddress $saddress" "$clogfile"

    # Collect return codes
    client_ret=$?
    wait $server_pid
    server_ret=$?

    if [[ $client_ret != 0 || $server_ret != 0 ]]; then
        if [ $client_ret != 0 ]; then
            message "Error: client returned $client_ret."
        fi
        if [ $server_ret != 0 ]; then
            message "Error: server returned $server_ret."
        fi
    else
        message "Test completed successfully."
    fi
}

for proto in ${protos[@]}; do
    for num in ${instances[@]}; do
        # BMI doesn't do well with >1 instances, so avoid those tests
        if [[ $proto == "bmi+tcp" && $num -gt 1 ]]; then
            continue;
        fi

        i=1
        while [ $i -le $repeats ]; do
            run_one $proto $num $i
            i=$((i + 1))
        done
    done
done
