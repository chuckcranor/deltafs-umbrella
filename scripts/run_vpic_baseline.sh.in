#!/bin/bash

### instant death on misc errors ###
set -euo pipefail

######################
# Tunable parameters #
######################

ip_subnet=${1:-"10.92"}
nodes=${2:-"1"}
cores_per_node=${3:-"4"}
init_procs_per_node=${4:-"4"}
procs_per_node_increase_step=${5:-"4"}
query_multiple_partices=0
num_vpic_dumps=${6:-"2"}
px_factor=${7:-"4"}
py_factor=${8:-"2"}

###############
# Core script #
###############

source @CMAKE_INSTALL_PREFIX@/scripts/common.sh

### skip all bbos code ###
bbos_buddies=0
### override default number of dumps ###
vpic_epochs=$num_vpic_dumps

message "Script begin..."
# keep track of start time so we can see how long this takes
timein=`date`

### lustre ###
get_jobdir
### bb ###
get_bbdir
### machine list ###
gen_hosts

### set read path ###
last=$query_multiple_partices
do_querying=1

procs_per_node=$init_procs_per_node
while [ $procs_per_node -le $cores_per_node ]
do
    cores=$((procs_per_node * nodes))
    px=$((cores * px_factor))
    py=$((10**py_factor))
    parts=$((px * py * 100))

    build_deck "file-per-process" $px $py
    message ""
    message ""
    do_run "baseline" $parts $procs_per_node

    if [ $procs_per_node -eq 1 ]; then
        procs_per_node=$procs_per_node_increase_step
    else
        procs_per_node=$(( procs_per_node + procs_per_node_increase_step ))
    fi
done

# overall time
timeout=`date`

message "Script complete!"
message "start: ${timein}"
message "  end: ${timeout}"

exit 0
